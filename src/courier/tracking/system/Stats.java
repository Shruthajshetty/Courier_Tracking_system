/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package courier.tracking.system;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Window;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
/**
 *
 * @author User
 */
public class Stats extends javax.swing.JFrame {

    /**
     * Creates new form Stats
     */
    public Stats() {
        initComponents();
        setExtendedState(Stats.MAXIMIZED_BOTH);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        stat2 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        statb2 = new javax.swing.JButton();
        stat3 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        stat6 = new javax.swing.JPanel();
        jButton5 = new javax.swing.JButton();
        stat7 = new javax.swing.JPanel();
        jButton6 = new javax.swing.JButton();
        stat8 = new javax.swing.JPanel();
        jButton7 = new javax.swing.JButton();
        stat9 = new javax.swing.JPanel();
        jButton8 = new javax.swing.JButton();
        stat10 = new javax.swing.JPanel();
        jButton9 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(239, 156, 210));
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        getContentPane().setLayout(null);

        stat2.setBackground(new java.awt.Color(255, 228, 255));
        stat2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        stat2.setForeground(new java.awt.Color(0, 153, 153));

        jButton2.setBackground(new java.awt.Color(73, 46, 154));
        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Shipments with good ratings");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout stat2Layout = new javax.swing.GroupLayout(stat2);
        stat2.setLayout(stat2Layout);
        stat2Layout.setHorizontalGroup(
            stat2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(stat2Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jButton2)
                .addContainerGap(34, Short.MAX_VALUE))
        );
        stat2Layout.setVerticalGroup(
            stat2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(stat2Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(39, Short.MAX_VALUE))
        );

        getContentPane().add(stat2);
        stat2.setBounds(520, 110, 290, 160);

        jPanel3.setBackground(new java.awt.Color(255, 228, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel3.setForeground(new java.awt.Color(255, 255, 0));

        statb2.setBackground(new java.awt.Color(73, 46, 154));
        statb2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        statb2.setForeground(new java.awt.Color(255, 255, 255));
        statb2.setText("Shipments that are not delivered");
        statb2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statb2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(statb2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(statb2, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(40, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel3);
        jPanel3.setBounds(110, 110, 320, 160);

        stat3.setBackground(new java.awt.Color(255, 228, 255));
        stat3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        stat3.setForeground(new java.awt.Color(0, 153, 153));

        jButton3.setBackground(new java.awt.Color(73, 46, 154));
        jButton3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Driver information for each shipments");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout stat3Layout = new javax.swing.GroupLayout(stat3);
        stat3.setLayout(stat3Layout);
        stat3Layout.setHorizontalGroup(
            stat3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(stat3Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jButton3)
                .addContainerGap(30, Short.MAX_VALUE))
        );
        stat3Layout.setVerticalGroup(
            stat3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(stat3Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(40, Short.MAX_VALUE))
        );

        getContentPane().add(stat3);
        stat3.setBounds(890, 110, 350, 160);

        stat6.setBackground(new java.awt.Color(255, 228, 255));
        stat6.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        stat6.setForeground(new java.awt.Color(0, 153, 153));

        jButton5.setBackground(new java.awt.Color(73, 46, 154));
        jButton5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setText("Average time for each comapny");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout stat6Layout = new javax.swing.GroupLayout(stat6);
        stat6.setLayout(stat6Layout);
        stat6Layout.setHorizontalGroup(
            stat6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, stat6Layout.createSequentialGroup()
                .addContainerGap(31, Short.MAX_VALUE)
                .addComponent(jButton5)
                .addGap(29, 29, 29))
        );
        stat6Layout.setVerticalGroup(
            stat6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, stat6Layout.createSequentialGroup()
                .addContainerGap(37, Short.MAX_VALUE)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34))
        );

        getContentPane().add(stat6);
        stat6.setBounds(890, 320, 310, 160);

        stat7.setBackground(new java.awt.Color(255, 228, 255));
        stat7.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        stat7.setForeground(new java.awt.Color(0, 153, 153));

        jButton6.setBackground(new java.awt.Color(73, 46, 154));
        jButton6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton6.setForeground(new java.awt.Color(255, 255, 255));
        jButton6.setText("Total amount earned by each company");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout stat7Layout = new javax.swing.GroupLayout(stat7);
        stat7.setLayout(stat7Layout);
        stat7Layout.setHorizontalGroup(
            stat7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(stat7Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jButton6)
                .addContainerGap(23, Short.MAX_VALUE))
        );
        stat7Layout.setVerticalGroup(
            stat7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(stat7Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        getContentPane().add(stat7);
        stat7.setBounds(110, 320, 340, 160);

        stat8.setBackground(new java.awt.Color(255, 228, 255));
        stat8.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        stat8.setForeground(new java.awt.Color(0, 153, 153));

        jButton7.setBackground(new java.awt.Color(73, 46, 154));
        jButton7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton7.setForeground(new java.awt.Color(255, 255, 255));
        jButton7.setText("No of shipments by each employee");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout stat8Layout = new javax.swing.GroupLayout(stat8);
        stat8.setLayout(stat8Layout);
        stat8Layout.setHorizontalGroup(
            stat8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(stat8Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jButton7)
                .addContainerGap(26, Short.MAX_VALUE))
        );
        stat8Layout.setVerticalGroup(
            stat8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, stat8Layout.createSequentialGroup()
                .addContainerGap(36, Short.MAX_VALUE)
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34))
        );

        getContentPane().add(stat8);
        stat8.setBounds(520, 320, 320, 160);

        stat9.setBackground(new java.awt.Color(255, 228, 255));
        stat9.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        stat9.setForeground(new java.awt.Color(0, 153, 153));

        jButton8.setBackground(new java.awt.Color(73, 46, 154));
        jButton8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton8.setForeground(new java.awt.Color(255, 255, 255));
        jButton8.setText("Average no of shipments by each customers");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout stat9Layout = new javax.swing.GroupLayout(stat9);
        stat9.setLayout(stat9Layout);
        stat9Layout.setHorizontalGroup(
            stat9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(stat9Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jButton8)
                .addContainerGap(26, Short.MAX_VALUE))
        );
        stat9Layout.setVerticalGroup(
            stat9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(stat9Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(43, Short.MAX_VALUE))
        );

        getContentPane().add(stat9);
        stat9.setBounds(220, 530, 380, 160);

        stat10.setBackground(new java.awt.Color(255, 228, 255));
        stat10.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        stat10.setForeground(new java.awt.Color(0, 153, 153));

        jButton9.setBackground(new java.awt.Color(73, 46, 154));
        jButton9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton9.setForeground(new java.awt.Color(255, 255, 255));
        jButton9.setText("Shipments exceeding the delivery date");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout stat10Layout = new javax.swing.GroupLayout(stat10);
        stat10.setLayout(stat10Layout);
        stat10Layout.setHorizontalGroup(
            stat10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(stat10Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(48, Short.MAX_VALUE))
        );
        stat10Layout.setVerticalGroup(
            stat10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(stat10Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(41, Short.MAX_VALUE))
        );

        getContentPane().add(stat10);
        stat10.setBounds(650, 530, 390, 160);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 102));
        jLabel1.setText("STATISTICS");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(640, 10, 240, 60);

        jButton4.setBackground(new java.awt.Color(0, 0, 102));
        jButton4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText(">");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4);
        jButton4.setBounds(30, 10, 80, 30);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void statb2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statb2ActionPerformed
//        dispose();
         retrieveShipmentData();
        
    }//GEN-LAST:event_statb2ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        retrieveReviewData("SELECT s.ShipmentID, s.Weight, s.Type, s.ShippingDate, s.ExpectedDate, " +
                   "r.Rating, r.Comment, c.Fname AS CustomerFirstName, " +
                   "co.CompanyName, CONCAT(d.Fname, ' ', d.Lname) AS DriverName " +
                   "FROM Shipment s " +
                   "JOIN Review r ON s.ShipmentID = r.ShipmentID " +
                   "JOIN User c ON r.UserID = c.UserID " +
                   "JOIN Driver d ON r.DriverID = d.DriverID " +
                   "JOIN Company co ON d.CompanyID = co.CompanyID " +
                   "WHERE r.Rating > 3");

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        retrieveDriverData();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        retrieveAverageDeliveryTime();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        retrieveTotalAmountEarned();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        retrieveDriverShipments();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
          retrieveUserShipments();
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        retrieveDelayedShipments();
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        new HomeAdminPage().setVisible(true);
    }//GEN-LAST:event_jButton4ActionPerformed
private void retrieveShipmentData() {
    try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/courier_db", "root", "SHRU@04")) {
        String query = "SELECT s.ShipmentID, s.Weight, s.Type, s.ShippingDate, s.ExpectedDate "
                + "FROM Shipment s "
                + "LEFT JOIN Delivery d ON s.ShipmentID = d.ShipmentID "
                + "WHERE d.ShipmentID IS NULL OR d.Status != 'Delivered'";

        try (PreparedStatement statement = connection.prepareStatement(query);
             ResultSet resultSet = statement.executeQuery()) {

            // Create a new JTable for the query
            JTable shipmentTable = new JTable();
            DefaultTableModel model = (DefaultTableModel) shipmentTable.getModel();
            model.setColumnIdentifiers(new Object[]{"Shipment ID", "Weight", "Type", "Shipping Date", "Expected Date"});
            shipmentTable.setFont(new Font("Arial", Font.PLAIN, 20));
            shipmentTable.setRowHeight(40);
            shipmentTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
            shipmentTable.setDefaultEditor(Object.class, null);
            JTableHeader header = shipmentTable.getTableHeader();
        header.setFont(new Font("Arial", Font.BOLD, 30));
            while (resultSet.next()) {
                int shipmentID = resultSet.getInt("ShipmentID");
                double weight = resultSet.getDouble("Weight");
                String type = resultSet.getString("Type");
                String shippingDate = resultSet.getString("ShippingDate");
                String expectedDate = resultSet.getString("ExpectedDate");

                Object[] row = {shipmentID, weight, type, shippingDate, expectedDate};
                model.addRow(row);
            }

            // Set column widths
            int[] columnWidths = {80, 60, 100, 100, 100};
            for (int i = 0; i < columnWidths.length; i++) {
                shipmentTable.getColumnModel().getColumn(i).setPreferredWidth(columnWidths[i]);
            }

            // Increase font size for better readability
            shipmentTable.setFont(new Font("Arial", Font.PLAIN, 16));

            // Set preferred size for JScrollPane
            JScrollPane scrollPane = new JScrollPane(shipmentTable);
            scrollPane.setPreferredSize(new Dimension(1200, 600));

            // Add "Edit" button below the table
            JButton editButton = new JButton("Edit");
            editButton.addActionListener(e -> {
                String input = JOptionPane.showInputDialog(this, "Enter Shipment ID to update delivery status:");
                if (input != null && !input.isEmpty()) {
                    try {
                        int shipmentIDInput = Integer.parseInt(input);
                        editDeliveryStatus(shipmentIDInput);
                    } catch (NumberFormatException ex) {
                        JOptionPane.showMessageDialog(this, "Invalid input. Please enter a valid Shipment ID.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            });

            JPanel buttonPanel = new JPanel();
            buttonPanel.add(editButton);
Font buttonFont = new Font("Arial", Font.PLAIN, 24);
        editButton.setFont(buttonFont);
            // Add the table and button panel to a parent panel
            JPanel parentPanel = new JPanel(new BorderLayout());
            parentPanel.add(scrollPane, BorderLayout.CENTER);
            parentPanel.add(buttonPanel, BorderLayout.SOUTH);

            // Show the new table with the "Edit" button in a dialog
            JOptionPane.showMessageDialog(this, parentPanel, "Shipment Data", JOptionPane.PLAIN_MESSAGE);

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error executing query: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error establishing connection: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}


private void retrieveReviewData(String query) {
    try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/courier_db", "root", "SHRU@04")) {
        try (PreparedStatement statement = connection.prepareStatement(query);
             ResultSet resultSet = statement.executeQuery()) {

            // Create a new JTable for the query
            JTable reviewTable = new JTable();
            DefaultTableModel model = (DefaultTableModel) reviewTable.getModel();
            model.setColumnIdentifiers(new Object[]{"ShipmentID", "Rating", "CompanyName", "DriverName"});
             setPreferredSize(new Dimension(800, 600));
            while (resultSet.next()) {
                int shipmentID = resultSet.getInt("ShipmentID");
                int rating = resultSet.getInt("Rating");
                String companyName = resultSet.getString("CompanyName");
                String employeeName = resultSet.getString("DriverName");

                Object[] row = {shipmentID, rating, companyName, employeeName};
                model.addRow(row);
            }

            // Set column widths
            JTableHeader header = reviewTable.getTableHeader();
            header.setFont(new Font("Arial", Font.BOLD, 30));

            // Increase font size for better readability
            reviewTable.setFont(new Font("Arial", Font.PLAIN, 20)); // Set font size for table
            reviewTable.setRowHeight(40); // Set row height
            reviewTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS); // Set auto resize mode
            reviewTable.setDefaultEditor(Object.class, null);
            // Set preferred size for JScrollPane
            JScrollPane scrollPane = new JScrollPane(reviewTable);
            scrollPane.setPreferredSize(new Dimension(1500, 600));

            // Create a panel to hold the table and the close button
            JPanel panel = new JPanel();
            panel.setLayout(new BorderLayout());
            panel.add(scrollPane, BorderLayout.CENTER);

          JButton closeButton = new JButton("Close");
            closeButton.setPreferredSize(new Dimension(100, 40)); // Set preferred size for the close button
            closeButton.addActionListener(e -> {
                // Close the dialog when the close button is clicked
                Window window = SwingUtilities.getWindowAncestor(panel);
                window.dispose();
            });
            panel.add(closeButton, BorderLayout.SOUTH);

            // Show the new panel in a dialog
            JOptionPane.showMessageDialog(this, panel, "Review Data", JOptionPane.PLAIN_MESSAGE);

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error executing query: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error establishing connection: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}



private void editDeliveryStatus(int shipmentID) {
    String[] options = {"Delivered", "In Transit"};
    int choice = JOptionPane.showOptionDialog(this, "Select the new delivery status:", "Edit Delivery Status",
            JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);

    if (choice == 0) {
        updateDeliveryStatus(shipmentID, "Delivered");
    } else if (choice == 1) {
        updateDeliveryStatus(shipmentID, "In Transit");
    }
}

private void updateDeliveryStatus(int shipmentID, String status) {
    try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/courier_db", "root", "SHRU@04")) {
        String updateQuery = "UPDATE Delivery SET Status = ? WHERE ShipmentID = ?";
        try (PreparedStatement statement = connection.prepareStatement(updateQuery)) {
            statement.setString(1, status);
            statement.setInt(2, shipmentID);
            int rowsUpdated = statement.executeUpdate();
            if (rowsUpdated > 0) {
                JOptionPane.showMessageDialog(this, "Delivery status updated successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Failed to update delivery status.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error updating delivery status: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}







private void retrieveDriverData() {
    try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/courier_db", "root", "SHRU@04")) {
        String query = "SELECT s.ShipmentID, s.ExpectedDate, s.Type AS ShipmentType, d.DriverID, CONCAT(d.Fname, ' ', d.Lname) AS DriverName, d.ContactNo AS DriverContact "
                + "FROM Shipment s "
                + "JOIN Delivery del ON s.ShipmentID = del.ShipmentID "
                + "JOIN Driver d ON del.DriverID = d.DriverID";

        try (PreparedStatement statement = connection.prepareStatement(query);
             ResultSet resultSet = statement.executeQuery()) {

            // Create a new JTable and set the model
            JTable resultTable = new JTable();
            DefaultTableModel model = new DefaultTableModel();
            resultTable.setModel(model);

            // Add columns to the model
            model.addColumn("Shipment ID");
            model.addColumn("Expected Date");
            model.addColumn("Shipment Type");
            model.addColumn("Driver ID");
            model.addColumn("Driver Name");
            model.addColumn("Driver Contact");

            while (resultSet.next()) {
                int shipmentID = resultSet.getInt("ShipmentID");
                String expectedDate = resultSet.getString("ExpectedDate");
                String shipmentType = resultSet.getString("ShipmentType");
                int driverID = resultSet.getInt("DriverID");
                String driverName = resultSet.getString("DriverName");
                String driverContact = resultSet.getString("DriverContact");

                // Add rows to the model
                model.addRow(new Object[]{shipmentID, expectedDate, shipmentType, driverID, driverName, driverContact});
            }
             JTableHeader header = resultTable.getTableHeader();
            header.setFont(new Font("Arial", Font.BOLD, 20));

            // Increase font size for better readability
            resultTable.setFont(new Font("Arial", Font.PLAIN, 14)); // Set font size for table
            resultTable.setRowHeight(40); // Set row height
            resultTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS); 
            // Assuming you have a JScrollPane for displaying the result
            JScrollPane scrollPane = new JScrollPane(resultTable);
            resultTable.setDefaultEditor(Object.class, null);
            // Create a new JFrame for displaying the result
            JFrame resultFrame = new JFrame("Driver Data");
            resultFrame.getContentPane().add(scrollPane);
            resultFrame.setSize(800, 600);  // Adjust the size as needed
            resultFrame.setVisible(true);

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error executing query: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error establishing connection: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}


private void retrieveAverageDeliveryTime() {
    try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/courier_db", "root", "SHRU@04")) {
        String query = "SELECT c.CompanyID, c.CompanyName, AVG(DATEDIFF(d.DeliveryDate, s.ShippingDate)) AS AverageDeliveryTime "
                + "FROM Shipment s "
                + "JOIN Delivery d ON s.ShipmentID = d.ShipmentID "
                + "JOIN Company c ON s.CompanyID = c.CompanyID "
                + "WHERE d.Status = 'Delivered' "
                + "GROUP BY c.CompanyID, c.CompanyName";

        try (PreparedStatement statement = connection.prepareStatement(query);
             ResultSet resultSet = statement.executeQuery()) {

            // Create a new JTable and set the model
            JTable resultTable = new JTable();
            DefaultTableModel model = new DefaultTableModel();
            resultTable.setModel(model);

            // Add columns to the model
            model.addColumn("Company ID");
            model.addColumn("Company Name");
            model.addColumn("Average Delivery Time");

            while (resultSet.next()) {
                int companyID = resultSet.getInt("CompanyID");
                String companyName = resultSet.getString("CompanyName");
                double averageDeliveryTime = resultSet.getDouble("AverageDeliveryTime");

                // Add rows to the model
                model.addRow(new Object[]{companyID, companyName, averageDeliveryTime});
            }
             JTableHeader header = resultTable.getTableHeader();
            header.setFont(new Font("Arial", Font.BOLD, 20));

            // Increase font size for better readability
            resultTable.setFont(new Font("Arial", Font.PLAIN, 14)); // Set font size for table
            resultTable.setRowHeight(40); // Set row height
            resultTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS); 
            // Assuming you have a JScrollPane for displaying the result
            JScrollPane scrollPane = new JScrollPane(resultTable);
            resultTable.setDefaultEditor(Object.class, null);
            // Create a new JFrame for displaying the result
            JFrame resultFrame = new JFrame("Average Delivery Time");
            resultFrame.getContentPane().add(scrollPane);
            resultFrame.setSize(800, 600);  // Adjust the size as needed
            resultFrame.setVisible(true);

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error executing query: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error establishing connection: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}





private void retrieveTotalAmountEarned() {
    try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/courier_db", "root", "SHRU@04")) {
        String query = "SELECT c.CompanyID, c.CompanyName, SUM(p.TotalAmount) AS TotalAmountEarned "
                + "FROM Company c "
                + "JOIN Shipment s ON c.CompanyID = s.CompanyID "
                + "JOIN Delivery d ON s.ShipmentID = d.ShipmentID "
                + "JOIN Payment p ON s.ShipmentID = p.ShipmentID "
                + "WHERE d.Status = 'Delivered' "
                + "GROUP BY c.CompanyID, c.CompanyName";

        try (PreparedStatement statement = connection.prepareStatement(query);
             ResultSet resultSet = statement.executeQuery()) {

            // Create a new JTable and set the model
            JTable resultTable = new JTable();
            DefaultTableModel model = new DefaultTableModel();
            resultTable.setModel(model);

            // Add columns to the model
            model.addColumn("Company ID");
            model.addColumn("Company Name");
            model.addColumn("Total Amount Earned");

            while (resultSet.next()) {
                int companyID = resultSet.getInt("CompanyID");
                String companyName = resultSet.getString("CompanyName");
                double totalAmountEarned = resultSet.getDouble("TotalAmountEarned");

                // Add rows to the model
                model.addRow(new Object[]{companyID, companyName, totalAmountEarned});
            }
            
 JTableHeader header = resultTable.getTableHeader();
            header.setFont(new Font("Arial", Font.BOLD, 20));

            // Increase font size for better readability
            resultTable.setFont(new Font("Arial", Font.PLAIN, 14)); // Set font size for table
            resultTable.setRowHeight(40); // Set row height
            resultTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS); 
            // Assuming you have a JScrollPane for displaying the result
            resultTable.setDefaultEditor(Object.class, null);
            JScrollPane scrollPane = new JScrollPane(resultTable);
            
            // Create a new JFrame for displaying the result
            JFrame resultFrame = new JFrame("Total Amount Earned");
            resultFrame.getContentPane().add(scrollPane);
            resultFrame.setSize(800, 600);  // Adjust the size as needed
            resultFrame.setVisible(true);

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error executing query: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error establishing connection: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}


private void retrieveDelayedShipments() {
    try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/courier_db", "root", "SHRU@04")) {
        String query = "SELECT s.ShipmentID, s.Type AS ShipmentType, s.ExpectedDate, d.Status AS DeliveryStatus "
                + "FROM Shipment s "
                + "JOIN Delivery d ON s.ShipmentID = d.ShipmentID "
                + "WHERE CURRENT_DATE() > s.ExpectedDate AND d.Status != 'Delivered'";

        try (PreparedStatement statement = connection.prepareStatement(query);
             ResultSet resultSet = statement.executeQuery()) {

            // Create a new JTable and set the model
            JTable resultTable = new JTable();
            DefaultTableModel model = new DefaultTableModel();
            resultTable.setModel(model);

            // Add columns to the model
            model.addColumn("Shipment ID");
            model.addColumn("Shipment Type");
            model.addColumn("Expected Date");
            model.addColumn("Delivery Status");

            while (resultSet.next()) {
                int shipmentID = resultSet.getInt("ShipmentID");
                String shipmentType = resultSet.getString("ShipmentType");
                String expectedDate = resultSet.getString("ExpectedDate");
                String deliveryStatus = resultSet.getString("DeliveryStatus");

                // Add rows to the model
                model.addRow(new Object[]{shipmentID, shipmentType, expectedDate, deliveryStatus});
            }
             JTableHeader header = resultTable.getTableHeader();
            header.setFont(new Font("Arial", Font.BOLD, 20));

            // Increase font size for better readability
            resultTable.setFont(new Font("Arial", Font.PLAIN, 14)); // Set font size for table
            resultTable.setRowHeight(40); // Set row height
            resultTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS); 
            resultTable.setDefaultEditor(Object.class, null);
            // Assuming you have a JScrollPane for displaying the result
            JScrollPane scrollPane = new JScrollPane(resultTable);

            // Create a new JFrame for displaying the result
            JFrame resultFrame = new JFrame("Delayed Shipments");
            resultFrame.getContentPane().add(scrollPane);
            resultFrame.setSize(800, 600);  // Adjust the size as needed
            resultFrame.setVisible(true);

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error executing query: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error establishing connection: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}



private void retrieveDriverShipments() {
    try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/courier_db", "root", "SHRU@04")) {
        String query = "SELECT d.DriverID, CONCAT(d.Fname, ' ', d.Lname) AS DriverName, COUNT(*) AS NumberOfShipmentsDelivered "
                + "FROM Delivery del "
                + "JOIN Driver d ON del.DriverID = d.DriverID "
                + "WHERE del.Status = 'Delivered' "
                + "GROUP BY d.DriverID, DriverName";

        try (PreparedStatement statement = connection.prepareStatement(query);
             ResultSet resultSet = statement.executeQuery()) {

            // Create a new JTable and set the model
            JTable resultTable = new JTable();
            DefaultTableModel model = new DefaultTableModel();
            resultTable.setModel(model);

            // Add columns to the model
            model.addColumn("Driver ID");
            model.addColumn("Driver Name");
            model.addColumn("Number of Shipments Delivered");

            while (resultSet.next()) {
                int driverID = resultSet.getInt("DriverID");
                String driverName = resultSet.getString("DriverName");
                int numberOfShipmentsDelivered = resultSet.getInt("NumberOfShipmentsDelivered");

                // Add rows to the model
                model.addRow(new Object[]{driverID, driverName, numberOfShipmentsDelivered});
            }
             JTableHeader header = resultTable.getTableHeader();
            header.setFont(new Font("Arial", Font.BOLD, 20));

            // Increase font size for better readability
            resultTable.setFont(new Font("Arial", Font.PLAIN, 14)); // Set font size for table
            resultTable.setRowHeight(40); // Set row height
            resultTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS); 
            // Assuming you have a JScrollPane for displaying the result
            resultTable.setDefaultEditor(Object.class, null);
            JScrollPane scrollPane = new JScrollPane(resultTable);

            // Create a new JFrame for displaying the result
            JFrame resultFrame = new JFrame("Driver Shipments");
            resultFrame.getContentPane().add(scrollPane);
            resultFrame.setSize(800, 600);  // Adjust the size as needed
            resultFrame.setVisible(true);

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error executing query: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error establishing connection: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}
 

private void retrieveUserShipments() {
    try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/courier_db", "root", "SHRU@04")) {
        String query = "SELECT u.UserID, CONCAT(u.Fname, ' ', u.Lname) AS UserName, AVG(shipmentsPerUser.NumberOfShipments) AS AverageShipments "
                + "FROM User u "
                + "LEFT JOIN ("
                + "    SELECT s.UserID, COUNT(*) AS NumberOfShipments "
                + "    FROM Shipment s "
                + "    GROUP BY s.UserID"
                + ") AS shipmentsPerUser ON u.UserID = shipmentsPerUser.UserID "
                + "GROUP BY u.UserID, UserName";

        try (PreparedStatement statement = connection.prepareStatement(query);
             ResultSet resultSet = statement.executeQuery()) {

            // Create a new JTable and set the model
            JTable resultTable = new JTable();
            DefaultTableModel model = new DefaultTableModel();
            resultTable.setModel(model);

            // Add columns to the model
            model.addColumn("User ID");
            model.addColumn("User Name");
            model.addColumn("Average Shipments");

            while (resultSet.next()) {
                int userID = resultSet.getInt("UserID");
                String userName = resultSet.getString("UserName");
                double averageShipments = resultSet.getDouble("AverageShipments");

                // Add rows to the model
                model.addRow(new Object[]{userID, userName, averageShipments});
            }
             JTableHeader header = resultTable.getTableHeader();
            header.setFont(new Font("Arial", Font.BOLD, 20));

            // Increase font size for better readability
            resultTable.setFont(new Font("Arial", Font.PLAIN, 14)); // Set font size for table
            resultTable.setRowHeight(40); // Set row height
            resultTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS); 
            resultTable.setDefaultEditor(Object.class, null);
            // Assuming you have a JScrollPane for displaying the result
            JScrollPane scrollPane = new JScrollPane(resultTable);

            // Create a new JFrame for displaying the result
            JFrame resultFrame = new JFrame("User Shipments");
            resultFrame.getContentPane().add(scrollPane);
            resultFrame.setSize(800, 600);  // Adjust the size as needed
            resultFrame.setVisible(true);

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error executing query: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error establishing connection: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Stats.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Stats.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Stats.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Stats.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Stats().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel stat10;
    private javax.swing.JPanel stat2;
    private javax.swing.JPanel stat3;
    private javax.swing.JPanel stat6;
    private javax.swing.JPanel stat7;
    private javax.swing.JPanel stat8;
    private javax.swing.JPanel stat9;
    private javax.swing.JButton statb2;
    // End of variables declaration//GEN-END:variables
}
